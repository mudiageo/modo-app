generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token      String?
  access_token       String?
  expires_at        Int?
  user              User      @relation(fields: [userId], references: [id])

  token_type    String?
  scope         String?
  id_token      String?
  session_state String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationToken {
  id      String   @id @default(cuid())
  identifier   String
  type   String?
  token   String   @unique
  expires DateTime

  @@unique([identifier, token])
}
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  password      String?
  googleId      String?        @unique
  emailVerified DateTime?
  image         String?
  role String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  premium       Boolean        @default(false)
  premiumUntil  DateTime?
  tasks         Task[]
  lastLoginAt            DateTime?
  loginAttempts          Int       @default(0)
  isLocked               Boolean   @default(false)
  lockUntil              DateTime?
  department             String?
  studySessions StudySession[]
  payments      Payment[]
  accounts      Account[]
  sessions      Session[]
}

model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  course        String
  dueDate       DateTime
  priority      String
  estimatedTime Int
  completed     Boolean  @default(false)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model StudySession {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  duration  Int?
  subject   String
  userId    String
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  amount    Float
  currency  String
  status    String
  reference String   @unique
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
